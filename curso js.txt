Programación con JavaScript Ed 17
telefonica educacion digital & Cense

    Antonio martin 
    coordinador academico

        WEBAPPS 
            programacion web del lado del cliente
                permite crear web con contenido interactivo
                con efectos visuales que faciulitan la intetaccion
                ejem. gmail
                el cliente web (el navegador del usuario) interptreta el lenguaje javascript
            aprendizaje 
                javsacript 
                librerias 
                framework    

        PAGINAS WEB DINAMICAS
            Creación de páginas web dinámicas
            Una página web dinámica es una página que 
            se actualiza conforme el usuario 
                va haciendo peticiones, 
                navegando por la página o actualizando su contenido. 
            Suelen venir cargadas de 
                alto contenido visual, 
                opciones para discapacitados o 
                aprendizaje de las elecciones que ha ido tomando el usuario.
        PAGINAS WEB ESTATICAS
            En  contra  a  lo  que  ocurre  con  las  páginas  estáticas,  
            en  las  que su  contenido  e  información  se  encuentra  predeterminado,  
            en  las páginas dinámicas la información va apareciendo según el ciclo de 
            vida del usuario en la aplicación.
        WEB DINAMICA    
            Esto  se  hace  posible  porque  una  página  dinámica  tiene  asociada  
                una aplicación web 
                o una Base de Datos 
            desde la que se permite visualizar el contenido.
            Para la creación de este tipo de páginas deberán utilizarse 
                etiquetas HTML 
                y algún lenguaje de programación que se ejecute 
                    tanto del “lado servidor” como del “lado cliente”.
            Los  lenguajes  utilizados  para  la  creación  de  este  tipo  de  páginas  
            son principalmente: 
                ASP, PHP, JSP, pero, sobre todo, mucho Javascript (JS).
        frameworsk JAVASCRIPT 
            Actualmente, Javascript (JS) ha experimentado un avance 
            sorprendente, debido a la aparición de numerosos frameworks de 
            desarrollo web basados en su lenguaje. En este manual trataremos 
            algunos de ellos, como 
            JQuery o AngularJS.
        VENTAJAS & desventajas
            El  proceso  de  actualización  y  creación  es  sumamente  sencillo,  
            sin necesidad de entrar en el servidor.
            • Gran número de funcionalidades y desarrollos tales como 
                bases de datos, 
                foros, 
                contenido dinámico, etc.
            • Facilitan tener actualizada diariamente toda la información.
            • Diferentes áreas de diferentes empresas pueden participar en la 
                creación y el mantenimiento.
            • Dominación total sobre la administración de todos los contenidos.

            1.1 | Ventajas
            • Contenidos fácilmente reutilizables.
            • Una mayor interactividad con el usuario.
            • Presentación de contenidos en 
                diversos dispositivos y formatos, 
                como los terminales móviles.
            • Los autores del contenido no requieren conocimientos técnicos.
            1.2 | Desventajas
            • Mayores requerimientos técnicos para su alojamiento en
                Servidores de pago y, por tanto, costes de alojamiento mayores.    
            • En algunos casos, un mayor coste de desarrollo que implican
                mayor cantidad de recursos en el apartado visual de la aplicación.
            
        2. El lenguaje JavaScript
            JavaScript, que no debe confundirse con Java, 
            fue creado en 10 días en 
            mayo de 1995 por Brendan Eich, 
                que entonces trabajaba en Netscape y ahora en Mozilla.
                JavaScript no siempre fue conocido como JavaScript: 
                el nombre original era Mocha, un nombre elegido 
                por Marc Andreessen,fundador de Netscape.

            En septiembre de 1995 el nombre fue cambiado a LiveScript
            
            en diciembre del 1995, al recibir una licencia
                de marca de Sun, se adoptó el nombre de JavaScript. Esto fue un
                movimiento de marketing en ese momento, con Java que era muy
                popular en todo entonces.
            
            En 1996 - 1997 JavaScript fue llevado a ECMA para labrarse una
                especificación estándar, que otros proveedores de navegadores
                entonces podrían implementar basado en el trabajo realizado en
                Netscape. El trabajo realizado en este período de tiempo finalmente
                llevó a la liberación oficial de ECMA-262 Ed.1: +
                
            ECMAScript es el
                nombre de la norma oficial, siendo JavaScript la más conocida
                de las implementaciones. ActionScript 3 es otra aplicación bien
                conocida de ECMAScript.
            El proceso de las normas continuó en ciclos, con los lanzamientos de 
                ECMAScript 2 en 1998 y 
                ECMAScript 3 en 1999, que es la línea
                base para el moderno JavaScript. El trabajo dirigido por Waldemar
                Horwat (entonces de Netscape, ahora en Google) se inició en 2000
            y en un primer momento, Microsoft parecía a participar (e incluso
            implementar) algunas de las propuestas en su idioma JScript.net.
            El próximo evento importante fue en 2005, con dos grandes
            acontecimientos en la historia de JavaScript. 
                En primer lugar,
                    Brendan Eich y Mozilla reincorporaron Ecma como miembro sin
                    fines de lucro y el trabajo comenzó en E4X, ECMA-357, que venía
                de ex empleados de Microsoft en BEA (originalmente adquirido
                como Crossgain). Esto llevó a trabajar en forma conjunta con
                Macromedia, que estaban implementando E4X en ActionScript 3.
            Así, junto con Macromedia (posteriormente adquirida por Adobe),
            el trabajo se reinicia en ECMAScript 4 con el objetivo de estandarizar
            lo que había en AS3 y aplicarlo en SpiderMonkey. Con este fin,
            Adobe lanzó el “AVM2”, cuyo nombre en código Tamarin, como un
            proyecto de código abierto. Pero Tamarin y AS3 eran demasiado
            diferentes de Web JavaScript para converger, como se dieron
            cuenta las partes en 2007 y 2008.
            Por desgracia, todavía había confusión entre los diferentes
            actores; Doug Crockford - luego a Yahoo! - se unió a Microsoft en
            2007 para oponerse a ECMAScript 4, lo que le llevó al 3,1 refuerzo
            de ECMAScript.
            Mientras todo esto sucedía las comunidades de origen y
            desarrolladores abiertas se pusieron a trabajar para revolucionar lo
            que podría hacerse con JavaScript. Este esfuerzo de la comunidad
            se desató en 2005, 
            cuando Jesse James Garrett publicó un libro
            blanco en el que acuñó el término Ajax, y describió un conjunto
            de tecnologías, de las cuales JavaScript era la columna vertebral,
            que se utiliza para crear aplicaciones web en las que 
                los datos pueden ser cargados en el fondo, 
                evitando la necesidad de cargar la página completa y como resultado: 
                aplicaciones más dinámicas.
            Esto dio lugar a un periodo de renacimiento del uso de JavaScript
            encabezada por bibliotecas de código abierto y las comunidades
            que se formaron a su alrededor, con las bibliotecas como 
                Prototype,
                JQuery,
                Dojo, 
                Mootools y otros.
            En julio de 2008 
                las partes dispares de ambos lados se reunieron en Oslo. 
                Esto llevó a la eventual acuerdo a principios de 2009 para
                cambiar el nombre de ECMAScript 3.1 a ECMAScript 5 e impulsar el
                lenguaje.
                Todo esto entonces nos trae a la actualidad, con JavaScript, que
                ha entrado en un nuevo y emocionante ciclo de evolución, la
                innovación y la normalización, con nuevos desarrollos como
                la plataforma nodejs, que nos permite utilizar JavaScript en el
                lado del servidor, y APIs de HTML5 para controlar los medios
                de comunicación de los usuarios, se abren sockets web para la
                comunicación, obtener datos sobre las características de ubicación
                y disposición geográfica, y más.
            En el año 2014 y principios del 2015 
                se considera HTML5 y el nuevo ECMAScript 5 como un estándar para 
                el desarrollo de aplicaciones web.
            Es un momento emocionante para aprender JavaScript.
        2.1 | Pero, ¿qué es javascript?
            La integración entre JavaScript y HTML es muy fácil y variada, 
            ya que hay al menos tres maneras para incluir código JavaScript en las páginas web.
            ESCRIBIR JAVASCRIPT EN EL PROPIO DOCUMENTO HTML
                Las sentencias JavaScript se encierran entre etiquetas, o tags,
                <script> y se incluyen en cualquier parte del documento. 
                Aunque es correcto incluir cualquier bloque de sentencias en
                cualquier zona del documento, se recomienda definir el bloque de
                código JavaScript dentro de la cabecera del documento (dentro de la
                etiqueta <head>)

                Para que la página HTML obtenida sea correcta, es imprescindible
                    agregar el atributo type a la etiqueta <script>. 
                    Los valores a los que se iguala el atributo type están estandarizados 
                    y para el caso de JavaScript, el valor correcto es text/javascript.
                Este método se emplea cuando se define un bloque pequeño de
                sentencias o cuando se quieren incluir códigos específicos en un
                determinado documento.
                La principal desventaja es el no reutilizamiento ya que si se quiere
                hacer una modificación en el bloque de código, es necesario modificar
                todas las páginas que incluyen ese mismo bloque de código
                JavaScript (que habremos copiado en cada una de las respectivas
                páginas), por lo que no lo hace reutilizable.
            DEFINIR JAVASCRIPT EN UN ARCHIVO EXTERNO A NUESTRO DOCUMENTO
                Las sentencias JavaScript se pueden escribir en un archivo externo
                de tipo JavaScript (.js) que los documentos HTML enlazan mediante la
                etiqueta (o tag) <script>.
                Se pueden enlazar todos los archivos JavaScript que se necesiten
                y cada documento HTML puede enlazar tantos ficheros JavaScript
                como utilice.
                Aparte del atributo type, este método hace imprescindible definir el
                atributo src, que es el que indica la URL (o dirección) correspondiente
                al fichero JavaScript que se quiere unir. 

                Cada etiqueta <script> solamente puede unir un único fichero,
                pero en un mismo documento se pueden incluir tantas etiquetas
                (o tags) <script> como sean necesarias, lo que hace estos archivos
                reutilizables.
                Los ficheros de tipo JavaScript son archivos normales de texto con
                la extensión .js, que se pueden crear con cualquier editor de texto.
                La mayor ventaja de enlazar un fichero JavaScript externo es que se
                simplifica el código HTML del documento, que se puede reutilizar el
                mismo código JavaScript en todos los documentos del sitio web y
                que cualquier modificación realizada en el fichero JavaScript se ve
                reflejada inmediatamente en todas las páginas HTML en los que
                está importado.
            INCLUIR JAVASCRIPT DENTRO DE LAS PROPIAS ETIQUETAS HTML
                Esta última forma es la menos utilizada, ya
                que consiste en crear bloques de JavaScript
                dentro del código HTML del documento.
                La mayor desventaja de esta forma es que
                ensucia innecesariamente el código HTML
                del documento y complica el mantenimiento
                del bloque de código en JavaScript.    


                M1 - Prueba teórica
    A continuación, te proponemos una pequeña prueba de carácter teórico, para que puedas comprobar si has comprendido los diferentes temas tratados durante el módulo.
    Se recomienda aprobar esta actividad para alcanzar la superación del curso con un 70% de la nota promedio de las pruebas. Dispones de 3 intentos.
    Para superar este test, has de responder correctamente al menos el 70% de las preguntas.
    1. ¿Cuál de las siguientes NO es una ventaja de las páginas dinámicas?
    El proceso de actualización y creación es sumamente sencillo, sin necesidad de entrar en el servidor.
    Dominación total sobre la administración de todos los contenidos.
    Presentación de contenidos en diversos dispositivos y formatos, como los terminales móviles.
    Mayores requerimientos técnicos para su alojamiento en Servidores de pago y, por tanto, costes de alojamiento mayores.

    PRUEBA 1 NOTA 100
        2. Los programas escritos en JavaScript…
        X Pueden probarse en cualquier navegador sin necesidad de procesos intermedios.
        Sólo es compatible con navegadores que sólo soportan el estándar HTML5.
        JavaScript sólo se ejecuta en el lado servidor.
        Todas las anteriores son correctas.

        3. De las tres maneras que nos permiten incluir código JavaScript en páginas web ¿cuál de ellas, encierra las sentencias entre etiquetas o tags?
        X Escribir JavaScript en el propio documento HTML.
        Definir JavaScript en un archivo externo a nuestro documento.
        Incluir JavaScript dentro de las propias etiquetas HTML
        Ninguna de las anteriores es correcta.

        4. ¿Cuál es la mayor ventaja, de enlazar un fichero JavaScript externo?
        X Este método nos ayuda a simplificar el código HTML del documento.
        Nos ayuda a crear bloques de JavaScript dentro del código HTML.
        Definir el bloque de código JavaScript dentro de la cabecera del documento HTML.
        Ninguna de las anteriores es correcta

        5. Cada etiqueta <script>  sólo puede unir un único fichero, ¿Es posible que en un mismo documento se pueden incluir tantas etiquetas como sean necesarias?
        Sí
        X No
        Cada documento HTML tiene, un límite de etiquetas por documento
        Todas las anteriores son correctas.

        Test superado
        Has obtenido un 100 en esta tarea

MÓDULO 2. SINTAXIS DEL LENGUAJE JAVASCRIPT.
    La sintaxis de JavaScript es muy similar a la de otros lenguajes:
        No importan las nuevas líneas y los espacios en blanco al igual que sucede en HTML 
        ya que el propio intérprete del lenguaje los ignora.
    Es case sensitive: 
        distingue entre las mayúsculas y minúsculas.
        En contra de otros lenguajes de programación 
    no se definen el tipo de las variables (var). 
        En JavaScript nunca sabemos el tipo de datos que va a contener una variable 
        por lo que una misma variable puede almacenar diferentes tipos de datos.
    Sentencias    
        Cada sentencia en JavaScript acaba con el carácter; (punto y coma) 
        Aunque no en necesario ya que el intérprete lee cada sentencia,
        aunque no exista este carácter. Por convenio deberíamos incluirlo.
    Comentarios    
        Existe la opción de incluir comentarios para añadir información en el código fuente del programa. 
        Estos comentarios suelen servir para dar información al propietario del código 
        u otro desarrollador sobre el contenido del bloque de código en JavaScript. 
        Los comentarios pueden ser de una sola línea o de varias líneas (en bloque).
    Variables
        Sin las variables sería imposible escribir y crear "programas genéricos", 
        es decir, códigos que funcionan de la misma manera independientemente 
        de los valores concretos usados.
        Las variables en JavaScript se utilizan mediante la palabra reservada ‘var’.

        La palabra ‘var’ solamente se indica al definir por primera vez la variable, 
            y a eso lo llamamos ‘declarar’ una variable

        El nombre de una variable también se le conoce como identificador 
            y debe cumplir la siguiente normativa:
                El identificador únicamente puede estar formado por 
                    números, 
                    letras, 
                    y los símbolos ‘$’ y ‘_’ a lo sumo.
        El primer carácter del identificador no debe ser un número.
    Tipos de datos
        Ya sabemos que todas las variables en JavaScript se crean a través de 
        la palabra reservada “var” pero dependiendo de los valores que almacenen pueden ser de un tipo u otro.
        Numéricos
            Se usan para contener valores numéricos 
                enteros (llamados integer) 
                o decimales (llamados float).
        Cadenas de Texto
            Se usan para contener 
                caracteres, 
                palabras 
                y/o frases de texto
        Arrays
            Un array es una colección de variables, 
            sin importar los tipos de los que sean cada una. 
            Los arrays sirven para guardar colecciones de valores, 
            de manera que serviría para agrupar diferentes variables. 
            Por ejemplo, tenemos esta sucesión de variables con los días de la semana:

            Ese conjunto de datos no se puede manipular de forma conjunta, 
            pues cada uno está en una variable diferente. Si los almacenamos en un array, 
            estarían todos los datos apuntados por una variable que podría recorrerse 
            con una instrucción for. 
            Para guardarlos en un array sería: 
            var dias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"] 
            Este array luego se puede recorrer para, por ejemplo, mostrar sus valores: 
            for(var i=0;i<dias.length;i++){ alert(dias [i]);}

        Booleanos
            Las variables de tipo booleano también son llamadas o denominadas 
            con el nombre de variables de tipo lógico. 
            Estas variables suelen servir para condiciones o para la programación lógica.
    Operadores
        Los operadores manipulan los valores de las variables, 
        realizan cálculos matemáticos 
        y comparan los valores de diferentes variables.
        Veamos los diferentes tipos:

            Asignación
                Sirve para asignar un valor a una variable.
                ejem 
                    var num1=3

            Incremento y decremento
                Ambos operadores sirven para 
                    decrementar 
                    o incrementar el valor de una variable.
                    ejem
                        var num1=5 
                        ++num1 
                        alert(num1) //num1=6

            Lógicos
                Los operadores lógicos son adecuados para 
                    realizar condiciones 
                    y lógica matemática.

            Negación
                El operador de negación se utiliza para dar el valor contrario a una variable.
                ejem
                    var valor1=true 
                    alert(!valor1) //muestra false
            Matemáticos
                Los operadores declarados son: 
                    suma (+), resta (-), multiplicación (*) y división (/).

            Relacionales
                Los relacionales: 
                mayor que (>), 
                menor que (<), 
                mayor o igual (>=), 
                menor o igual (<=), 
                igual que (==) y 
                distinto de (!=).

            AND
                Este operador sirve para combinar los valores de dos variables, 
                usando lógica matemática y solo dando true si ambos valores son true

            OR
                Este operador sirve para combinar los valores de dos variables, 
                usando lógica matemática y solo dando true si alguno de los valores es true. 
                En otro caso el valor final es false.
    Objetos del navegador
        Cuando se carga una página en un navegador se crean un número de objetos 
        característicos del navegador según el contenido de la página.
    
        La siguiente figura muestra la jerarquía de clases del Modelo de Objetos del Documento 
        (Document Object Model - DOM).   
        window object   
        location object / history object / document object / navigator object / screen object
        form object / images object / link object   

        El objeto window 
            es el de más alto nivel, contiene las propiedades
            de la ventana y en el supuesto de trabajar con marcos (frames), se
            genera un objeto window para cada uno. 
            
            Ventana del Navegador o del
            Marco (frame) se representa
            mediante el objeto window

            EL OBJETO WINDOW
                Contiene las propiedades básicas de la ventana y sus componentes.
                Algunas de los datos más elementales son:
                    • defaultStatus 
                        contiene el mensaje que aparece en la barra de estado)
                    • frames 
                        es una matriz que representa todos los frames de la ventana
                    • length contiene el número de frames de la ventana
                    • name contiene el nombre de la ventana
                    • self hace referencia a la ventana activa

        El objeto document contiene
            todas las propiedades del documento actual, como son: su color de
            fondo, enlaces, imágenes, etc.

            Página HTML se representa
            mediante el objeto document   

        El objeto navigator contiene las propiedades del navegador. 
        El objeto location contiene las propiedades de la URL activa. 
        El objeto history contiene las propiedades que representan 
            a las URL que el usuario ha visitado anteriormente. 
            Es como una caché. 
        El objeto screen contiene información referente a la resolución de la pantalla 
            que muestra la URL.
    
        El objeto window también posee una serie de métodos que permiten
            ejecutar funciones específicas con las ventanas, como por ejemplo,
                crear ventanas y cuadros de diálogo.
            También es posible determinar el aspecto que tendrá la nueva
            ventana del navegador mediante los campos de datos que permiten
            configurar el menú, la barra de herramientas, la barra de estado, etc.
            El siguiente ejemplo muestra cómo abrir una nueva ventana desde la
            ventana actual

            ejemplo
                <html>
                    <head>
                        <title>Ejemplo de creación de ventana</title>
                        <script language="JavaScript">
                            function AbrirVentana() {
                                ventana=open("","nueva","toolbar=no,directories=no,menubar=no, width=280,height=180");
                                ventana.document.write("<HEAD><TITLE>Nueva Ventana</TITLE></HEAD><BODY>");
                                ventana.document.write("<FONT SIZE=4 COLOR=red>este es un ejemplo de ventana nueva </FONT><BR/><BR/>");
                                ventana.document.write("<FORM><INPUT TYPE='button' VALUE='Cerrar' onClick='self.close()'></FORM>");
                                ventana.document.write("La dirección de la ventana es: "+ventana.location);
                                ventana.document.write("La resolución de la pantalla es: "+ventana.screen.width+"x"+ventana.screen.height);

                            }
                        </script>
                    </head>
                    <body>
                        <form>
                            <input type="button" value="Abrir una ventana"onClick="AbrirVentana();">
                            <br>
                        </form>
                    </body>
                </html>
        EL OBJETO LOCATION
            El objeto location contiene toda la información sobre la URL que se
            está visualizando,         
        EL OBJETO SCREEN
            Permite obtener información sobre la resolución de la pantalla. 
            En el siguiente ejemplo, se estable el color de fondo de la página de acuerdo
            a la resolución que soporte la pantalla del usuario.  
                ejemplo 
                    <html>
                        <head>
                            <title> Ejemplo del Objeto screen</title> 
                        </head>
                        <body>
                            <script language=JavaScript>
                                switch (window.screen.colorDepth){
                                case 1: case 4:
                                    document.bgColor = "white";
                                    break;
                                case 8: case 15: case 16:
                                    document.bgColor = "blue";
                                    break;
                                case 24: case 32:
                                    document.bgColor = "skyblue";
                                    break;
                                default:
                                    document.bgColor = "white";
                                    }
                                document.write("Su pantalla soporta color de " + window.screen.colorDepth +" bit");
                            </script>
                        </body>
                    </html>  
        EL OBJETO DOCUMENT - LA PÁGINA EN SÍ
            El objeto document hace referencia a determinadas características de la página, como son 
                su color de fondo (bgColor), 
                el color de su enlaces,
            etc.
            El código que se muestra a continuación carga una imagen
            dependiendo de la elección que haga el usuario.            
              ejemplo 
                <html>
                    <head>
                        <title> Ejemplo del Objeto document</title>
                        <!-- Se muestra un número diferente de imágenes
                        dependiendo
                        -- del valor que introduzca el usuario
                        -- dato: src
                        -->
                    </head>
                    <body>
                        <IMG NAME="img1" SRC="" BORDER=0 WIDTH=200 HEIGHT=150>
                        <script language=JavaScript>
                            var myImages = new Array("usa.gif","canada.gif","jamaica.gif","mexico.gif");
                            var imgIndex = prompt("Enter a number from 0 to 3");
                            document.images["img1"].src = myImages[imgIndex];
                        </script>
                    </body>
                </html>  
            A continuación vemos un ejemplo que permite conectar código 
            a los eventos de la página web. 
            El primero de ellos simplemente muestra una ventana de alerta, 
            mientras que el segundo va modificando de forma aleatoria la imagen que se carga.
                Ejemplo 1             
                    <html>
                        <head>
                            <title> Ejemplo de Eventos</title>
                        </head>
                        <body>
                            <script language=JavaScript>
                                function linkSomePage_onclick() {
                                    alert('Este enlace no lleva a ninguna parte');
                                    return false;
                                }
                            </script>
                                <A HREF="somepage.html" NAME="linkSomePage">
                                    Pincha Aquí
                                </A>
                            <script language=JavaScript>
                                    window.document.links[0].onclick = linkSomePage_onclick;
                            </script>
                        </body>
                    </html>
                Ejemplo 2 
                    <html>
                        <head>
                            <title> Ejemplo del Objeto document</title>
                        <!-- Se carga una imagen aleatoria
                        -->
                            <script language=JavaScript>
                                var myImages = new Array("usa.gif","canada.gif","jamaica.gif","mexico.gif");
                                function changeImg(imgNumber) {
                                    var imgClicked = document.images[imgNumber];
                                    var newImgNumber = Math.round(Math.random() * 3);
                                    while (imgClicked.src.indexOf(myImages[newImgNumber])!= -1) {
                                        newImgNumber = Math.round(Math.random() * 3);
                                    }
                                    imgClicked.src = myImages[newImgNumber];
                                    return false;
                                }
                            </script>
                        </head>
                        <body>
                            <A HREF="" NAME="linkImg1"onclick="return changeImg(0)">
                                <IMG NAME=img1 SRC="usa.gif" BORDER=0 >
                            </A>
                            <A HREF=”” NAME="linkImg2" onclick="return changeImg(1)">
                                <IMG NAME=img1 SRC="mexico.gif" BORDER=0 >
                            </A>
                        </body>"
                    </html>   
        EL OBJETO HISTORY
            El objeto history contiene información sobre los enlaces que el usuario
            ha visitado. Se utiliza principalmente para generar botones de avance
            y retroceso.
        EL OBJETO NAVIGATOR
            El objeto navigator permite obtener información del navegador con el
            que se está visualizando el documento. El siguiente código JavaScript
            detecta el navegador que se está utilizando y abre la página específica
            del mismo.  
    PRUEBA 
        CLOSE
        Test superado
        Has obtenido un 100 en esta tarea 
        M2 - Prueba teórica
            A continuación, te proponemos una pequeña prueba de carácter teórico, para que puedas comprobar si has comprendido los diferentes temas tratados durante el módulo.
            Se recomienda aprobar esta actividad para alcanzar la superación del curso con un 70% de la nota promedio de las pruebas. Dispones de 3 intentos.
            Prueba realizada
            Tu resultado en el test ha sido: 100
            Has mejorado tu anterior nota de 80.
            Has superado el test.
            Tus respuestas
            1. Los valores que almacena una variable en JavaScript, pueden ser de diferentes tipos. Indica cuál no es de un tipo estándar:
            Númerico.
            Cadena de texto.
            Arrays.
            X Fracción
            2. Los siguientes símbolos: mayor que (>), menor que (<), mayor o igual (>=), menor o igual (<=), igual que (==) y distinto de (!=). Son operadores del tipo:
            X Relacional.
            Incremento y decremento.
            Lógico
            Matemático.
            3. El objeto de navegador window:
            X Contiene las propiedades básicas de la ventana y sus componentes.
            Contiene toda la información sobre la URL que se está visualizando.
            Hace referencia a determinadas características de la página.
            Permite obtener información del navegador con el que se está visualizando el documento.
            4. ¿Cuál de las siguientes líneas no es un comentario válido en JavaScript?
            //un comentario.
            ///un comentario.
            /*un comentario*/.
            X /& un comentario &/.
            5. ¿Es obligatorio declarar una variable en Javascript?
            Siempre
            X No
            Solo si es global
            Solo si es local      
Módulo 3. Control de flujo.
    Control de flujo
        Los códigos que se pueden escribir usando solo variables y operadores, 
            son una sucesión de instrucciones básicas.
        Hay programas complejos como 
            recorrer un array 
            o establecer una condición 
                que no pueden ser realizadas simplemente con una sucesión de instrucciones básicas, 
                es por ello que necesitamos instrucciones de control de flujo 
                que nos permite elegir líneas para ejecutar dentro de nuestro código 
                o repetir una serie de líneas un número de veces según una condición.
        Son instrucciones del tipo:
            "si se cumple esta condición, hazlo; 
            si no se cumple, haz esto otro"
            "repite esto mientras se cumpla esta condición".
            Utilizar este tipo de estructuras de control de flujo, 
            convierte a los programas en “inteligentes” 
            permitiendo tomar decisiones en función del valor de las variables utilizadas.    
    Funciones
        Para manejar nuestras diferentes variables 
        JavaScript hace uso de funciones y propiedades, 
        que ya se encuentran en el propio lenguaje. 
        A continuación, veremos las funciones según su utilidad.    

        Funciones para cadenas de texto
            Length, 
                halla la longitud de una cadena de texto
            +, 
                se emplea para concatenar varias cadenas de texto
            toUpperCase(),  
                convierte los caracteres a mayúsculas.
            toLowerCase(), 
                convierte los caracteres a minúsculas.
            charAt(posicion), 
                halla el carácter de la posición.
            indexOf(caracter), 
                halla la posición en la que se encuentra el carácter indicado. 
                Si no está devuelve -1, y si está varias veces su primera aparición.
            lastIndexOf(caracter), 
                halla la última posición en la que se encuentra el carácter. 
                Si no está devuelve -1.
            substring(inicio, final), 
                saca un trozo de una cadena de texto. 
                El parámetro ‘final’ no es obligatorio. 
                Si no se pone corta la cadena de texto hasta el final del string.
        Funciones útiles para arrays
            length, 
                halla el número de elementos dentro de un array.
            concat(), 
                concatena los elementos de varios arrays.
            join(separador), 
                une los elementos de un array para formar una cadena de texto. 
                Es lo contrario al “split”.
            pop(), 
                suprime el último elemento del array 
                y lo mete en la variable seleccionada.
            push(), 
                agrega un elemento (o varios) a nuestro array.
            shift(),
                suprime el primer elemento de nuestro array 
                y lo mete en la variable seleccionada.
            unshift(), 
                agrega un elemento (o varios) al principio de nuestro array.
            reverse(), 
                coloca los elementos de un array en su orden inverso.  
        Funciones útiles para números
            Infinity, 
                es el valor de infinito cuando las operaciones dan dicho resultado.
            toFixed(digitos), 
                fija el número de decimales que tiene que resolver una operación 
                y redondea si es necesario.          
    1.1 | Estructura if
        Es una estructura de condición, 
        si se comprueba el valor true de esa condición 
            se entra dentro del bloque de código encerrado entre {…},
        si no lo cumple no entra y, por tanto, no ejecuta esas líneas
            if(condicion) {...}
    1.2 | Estructura if…else
        Muchas veces necesitamos ejecutar bloques diferentes 
        dependiendo de una condición. Añadiendo la estructura anterior, 
        se agrega un bloque “else” que permite ejecutarse en el caso que no se cumpla
            la condición del “if”    
                if(condicion) {...}
            else {...}
        Aparte, se pueden poner otros bloques de código para que se ejecuten 
        si la condición del “if” no se cumple y queremos comprobar 
        que se satisface otra condición. Estos van con la estructura 
            “else if”.
                if(condicion) {...}
                else if(condicion2) {…}
                else {...}
        En este caso anterior el bloque “else” solo se ejecuta si no se ejecuta
        ningún bloque anterior. Se pueden poner tantos bloques “else if”
        como se quiera, teniendo en cuenta que solo se comprobará su
        condición si todos los bloques anteriores han dado false en sus
        respectivas condiciones. Por tanto, el orden en el que incluyamos
        los bloques “else if” es importante. El bloque “else”, por ello, solo
        se ejecutará al final (y solo se incluirá al final), cuando todos los
        demás bloques no han satisfecho a su condición.
    1.3 | Estructura for
        La estructura “for” permite usar repeticiones (denominadas bucles), 
        para que reiteren líneas de código mientras se satisfaga una condición

            for(inicializacion; condicion; actualizacion) 
            {...}

        El funcionamiento de la estructura “for” es: 
            repite las líneas del trozo de código, encerrado entre {…}, 
                mientras se cumpla la condición, 
                actualizando con cada repetición 
                los valores cambiantes de la condición.
            La “inicialización” son los valores iniciales de las variables que
            controlan la repetición.
    1.4 | Estructura for...in
        Es una variante de la estructura for y sirve para objetos y arrays 
        dentro del lenguaje JavaScript

            for(indice in array) {...}

            var numbers =[0,1,2];
            for(i in numbers) {
                var a =numbers[i];
            }

                En este caso anterior, nos serviría para recorrer todos los
                elementos contenidos dentro del array. 

                Daríamos 3 iteraciones dentro de nuestro bucle, 
                una por cada elemento de nuestro array. 
                Esta estructura es la óptima para recorrer un array o un objeto 
                en JavaScript ya que funciona sea
                cual sea el número de elementos de nuestro array.
    2. Funciones
        Para manejar nuestras diferentes variables JavaScript hace uso de 
            funciones
            y propiedades, que ya se encuentran en el propio lenguaje. 
            A continuación veremos las funciones según su utilidad.
        2.1 | Funciones útiles para cadenas de texto    
            • length, 
                halla la longitud de una cadena de texto 
                (el número de caracteres que la forman)

                var men = “Hola Mundo”;
                var numLetras = men.length; // numLetras = 10

                +, se emplea para concatenar varias cadenas de texto
                    var men1 = “Hola”;
                    var men2 = “ Mundo”;
                    var men = men1 + men2; // men = “Hola Mundo”
            • concat()        
                Aparte del operador +, tiene el mismo funcionamiento concat()

                    var men1 = “Hola”;
                    var men2 = men1.concat(“ Mundo”); // men2 = “Hola Mundo
                Y también con variables numéricas

                        var var1 = “Hola “; var var2 = 3;
                        var men = var1 + var2; // men = “Hola 3”

            •  toUpperCase(),
                convierte los caracteres a mayúsculas.            

                    var men1 = “Hola”;
                    var men2 = men1.toUpperCase(); // men2 = “HOLA”

            • toLowerCase(), 
                convierte los caracteres a minúsculas

                    var men1 = “HolA”;
                    var men2 = men1.toLowerCase(); // men2 = “hola”

            • charAt(posicion), 
                halla el carácter de la posición.

                    var men = “Hola”;
                    var l = men.charAt(0); // letra = H
                    l = men.charAt(3); // letra = a

            •  indexOf(caracter), 

                halla la posición en la que se encuentra el
                carácter indicado. Si no está devuelve -1, y si está varias veces
                su primera aparición.

                    var men = “Hola”;
                    var pos = men.indexOf(‘a’); // pos = 3
                    pos = men.indexOf(‘z’); // pos = -1

            • lastIndexOf(caracter), 
                halla la última posición en la que se
                encuentra el carácter. Si no está devuelve -1.

                    var men = “Hola”;
                    var pos = men.lastIndexOf(‘a’); // pos = 3
                    pos = men.lastIndexOf(‘z’); // pos = -1  

            • substring(inicio, final), 
                saca un trozo de una cadena de texto. 
                El parámetro ‘final’ no es obligatorio. 
                Si no se pone corta la cadena de texto hasta el final del string.  

                    var men = “Hola Mundo”;
                    var por = men.substring(2); // por = “la Mundo”
                    por = men.substring(5); // por = “Mundo”
                    por = men.substring(1, 8); // por = “ola Mun”
                    por = men.substring(3, 4); // por = “a”
                    por = men.substring(7); // por = “ndo”           

            • split(separador), 
                divide la cadena de texto en diferentes trozos,
                definiendo un separador para dividir esa cadena, y mete las
                porciones dentro de un array.

                    var men = “Hello World, be a string!”;
                    var p = men.split(“ “);
                    // p = [“Hello “, “ World,”, “ be “, “ a “, “ string!”];

        2.2 | Funciones útiles para arrays
            • length, 
                halla el número de elementos dentro de un array
                    var v = [“a”, “e”, “i”, “o”, “u”];
                    var num = v.length; // num = 5
            • concat(), 
                concatena los elementos de varios arrays.

                    var a1 = [1, 2, 3];
                    a2 = a1.concat(4, 5, 6); // a2 = [1, 2, 3, 4, 5, 6]
                    a3 = a1.concat([4, 5, 6]); // a3 = [1, 2, 3, 4, 5, 6]
            • join(separador), 
                une los elementos de un array para formar una
                cadena de texto. Es lo contrario al “split”. Se índice un separador
                para unir los elementos de la cadena.

                    var a = [“hola”, “mundo”];
                    var men = a.join(“”); // men = “holamundo”
                    men = a.join(“ “); // men = “hola mundo”

            • pop(), 
                suprime el último elemento del array y lo mete en la
                variable seleccionada.

                    var a = [1, 2, 3];
                    var u = a.pop(); // ahora a = [1, 2], u = 3   

             push(), 
                agrega un elemento (o varios) a nuestro array.

                    var a = [1, 2, 3];
                    a.push(4); // ahora a = [1, 2, 3, 4]

            • shift(), 
                suprime el primer elemento de nuestro array y lo mete en
                la variable seleccionada.

                    var a = [1, 2, 3];
                    var p = a.shift(); // ahora a = [2, 3], p = 1

            • unshift(), 
                agrega un elemento (o varios) al principio de nuestro
                array.

                    var a = [1, 2, 3];
                    a.unshift(0); // ahora a = [0, 1, 2, 3]
            • reverse(), 
                coloca los elementos de un array en su orden inverso

                     var a = [1, 2, 3];
                    a.reverse(); // ahora a = [3, 2, 1]  

        2.3 | Funciones útiles para números
            • NaN, 
                (del inglés, “Not a Number”) 
                el lenguaje JavaScript devuelve esto si la variable 
                con la que estamos trabajando o el
                resultado de una operación no es un número.

                    var num1 = 0; var num2 = 0;
                    alert(num1/num2); // muestra el valor NaN
            • isNaN(), 
                protege nuestro código de valores no numéricos.

                    var num1 = 0; var num2 = 0;
                    if(isNaN(num1/num2)) {…} else {…}
            • Infinity, 
                es el valor de infinito cuando las operaciones dan dicho
                resultado.

                    var num1 = 10; var num2 = 0;
                    alert(num1/num2); // valor Infinity

            • toFixed(digitos), 
                fija el número de decimales que tiene que
                resolver una operación y redondea si es necesario. 

                    var num1 = 4564.34567;
                    num1.toFixed(2); // 4564.35
                    num1.toFixed(6); // 4564.345670
                    num1.toFixed(); // 4564       
    3. El ámbito de las variables
        El ámbito de una variable (“scope”):
        ubicación en el código en la que se define
        la variable. Hay dos tipos de ámbitos: global y local.

            function crea() { var m = “Mensaje”;}
            crea(); alert(m);

                Este mensaje no muestra ningún mensaje ya que la variable ha
                sido inicializada dentro de una función por lo que se dice que es una
                variable local de esa función.

            var m = “Mensaje”;
            function muestra() {alert(m);}

                La variable “m” la hemos definido fuera de cualquier función por lo
                que se convierte en una variable global inicializada en el momento
                en el que se ejecuta dicha sentencia. Por tanto, todas las funciones
                tienen acceso a esa variable.

        Un problema habitual es llamar a una variable global y otra local de
        la misma manera. Si esto sucede, dentro de la función donde esté
        definida esa local, la local es la que toma prevalencia frente a la
        global.

                var m = “global”;
                function muestra() {var m = “local”; alert(m);}
                alert(m);muestra();alert(m);

                    Si ejecutamos dicho código obtenemos:
                        global local global
    PRUEBA
        Test superado
        Has obtenido un 100 en esta tarea  
        1. La estructura “If”:
            X Es una estructura de condición.
            Permite usar repeticiones.
            Sirve para usar repeticiones de objetos y arrays dentro del lenguaje JavaScript.
            Ninguna afirmación es correcta.

        2. La estructura “for”:
            X Nos permite usar repeticiones / bucles, que reiteren líneas de código mientras cumpla la condición.
            Nos permite ejecutar bloques de código, aunque la condición no se cumpla.
            Halla la posición en la que se encuentra el bloque de código indicado.
            Ninguna de las anteriores es correcta.

        3. Indica cuál de las siguientes NO es una función en JavaScript:
            Length
            toUpperCase()
            X For…in
            unshift()

        4. Para hallar el número de elementos de un array:
            X Utilizamos la propiedad length.
            Utilizamos la función concat().
            Utilizamos la función shift().
            No utilizamos ninguna función.

        5. Unir los elementos de un array para formar una cadena de texto, se realiza con la función de JavaScript:
            X join(separador)
            push()
            unshift
            reverse() 

Módulo 4. Eventos y objetos.                              

    Eventos
        Hasta el momento, todos los códigos que hemos visto siguen ejecutándose 
        sentencia a sentencia, sin interactuar con el usuario.
        Estos códigos son poco útiles en programas de JavaScript normales ya que 
        se espera y desea una interacción con los clientes que 
        estén usando esa página web. 
        Así,    clickar con el botón del ratón en ciertos apartados, 
                mover el mismo ratón, 
                o teclear 
                pueden ser eventos que se produzcan dentro de nuestra aplicación y se traduzcan en 
                funciones que se tienen que ejecutar en ciertos momentos en JavaScript.

        El propio lenguaje nos aporta una serie de eventos para medir la interacción del usuario con
        nuestra aplicación. 
        Estas funciones creadas en JavaScript son denominadas 
        “manejadores de eventos” o “event handlers”.
            Hay tres tipos de manejadores de eventos:
                Como atributos de las etiquetas HTML.
                Como funciones en código JavaScript externo.
                "Semánticos".

        Evento 
            Descripción 
            Elementos para los que está definido
        Onblur 
            Deseleccionar el elemento 
            <button>,<input>, <label>,<select>,<textarea>,<body>
        onchange 
            Deseleccionar un elemento que se ha modificado
            <input>,<select>,<textarea>
        onclick 
            Pinchar y soltar el ratón 
            Todos los elementos
        ondblclick 
            Pinchar dos veces seguidas con el ratón
            Todos los elementos
        onfocus 
            Seleccionar un elemento 
            <button>, <input>,<label>, <select>,<textarea>, <body>
        onkeydown 
            Pulsar una tecla (sin soltar) 
            Elementos de formulario y <body>
        onkeypress 
            Pulsar una tecla 
            Elementos de formulario y <body>
        onkeyup
            Soltar una tecla pulsada 
            Elementos de formulario y <body>
        onload 
            La página se ha cargado completamente
            <body>
        onmousedown 
            Pulsar (sin soltar) un botón del ratón
            Todos los elementos
        onmousemove 
            Mover el ratón 
            Todos los elementos
        onmouseout 
            El ratón “sale” del elemento (pasa por encima de otro elemento)
            Todos los elementos
        onmouseover 
            El ratón “entra” en elelemento (pasa por encima del elemento)
            Todos los elementos
        onmouseup 
            Soltar el botón que estaba pulsado en el ratón
            Todos los elementos
        onreset 
            Inicializar el formulario (borrar todos sus datos)
            <form>
        onresize 
            Se ha modificado el tamaño de la ventana del navegador
            <body>
        onselect 
            Seleccionar un texto 
            <input>, <textarea>
        onsubmit
            Enviar el formulario 
            <form>
        onunload 
            Se abandona la página (por ejemplo al cerrar el navegador)
            <body>


    Objetos
        Para trabajar objetos en programación vamos a utilizar JSON 
        (JavaScript Object Notation) 
        es un formato para el intercambio de datos por la red, donde usualmente se utilizaba XML.
        Es un conjunto de datos, comprendidos entre los que 
            puede medir JavaScript que son 
                objetos, 
                Arrays, 
                cadenas, 
                booleanos 
                y números en Javascript.
        Llegó sobre 2001 gracias al apoyo incondicional de Douglas Crockford. 
        Yahoo! ayudó a su difusión gracias a la adición de este formato en algunos de 
            sus servicios web más innovadores. 
        Google comienza a realizar sus feeds en JSON para 
            su protocolo web GData a finales del 2006.
        Es considerado como un lenguaje independiente de formato de los datos 
        cuya especificación es descrita en RFC4627.   

            {
                “id” : “0001”,
                “type” : “donut”,
                “name” : “Cake”,
                “image” : “ 
                    {
                        “url” : “images/0001.jpg”,
                        “width” : 200,
                        “height” : 200
                    },
                “thumbnail” : {
                    “url” : “images/thumbnails/0001.jpg”,
                    “width” : 32,
                    “height” : 32
                    },
                “dateEntry” : “2010-12-05”
            } 

    1.1 | Manejadores de eventos como atributos HTML
        Se incluye en un atributo del propio elemento HTML.
        En este ejemplo, 
            cuando nuestro cliente pinche en el botón se ejecutará todo el contenido 
            que hay dentro del atributo “onclick” que es nuestro manejador de eventos.
        Este método es quizás el menos práctico ya que impide la
            reutilización del código JavaScript (que solo se encuentra asignado a ese atributo).
                
                <input type=”button” value=”Pinchame” onclick=”alert(‘Gracias’);” />

        También se pueden poner varios manejadores en una misma etiqueta, 
        pero en diferentes atributos que son los manejadores,

            <div onclick=”alert(‘Has pulsado’);” onmouseover=”alert(‘Has pasado con el ratón’);”>    
    1.2 | Manejadores de eventos y variable this            
        La variable “this” es especial en JavaScript. 
            Se usa para que tome como valor el invocador del evento dentro del manejador. 
            Es decir, qué componente nos ha invocado a la función    

            <div 
                id=”contenido” 
                style=”width:180px; height:80px; border:thin solid silver”
                onmouseover=”this.style.borderColor=’green’;” 
                onmouseout=”this.style.borderColor=’red’;”>
                Sección de contenidos...
            </div>

            En este código, los manejadores de eventos 
                “onmouseout” y el “onmouseover” 
                (que cambian el color del borde de nuestro elemento) 
                utilizan la variable “this” para hacer referencia al 
                elemento que nos ha invocado al evento, 
                este es, el div con id “contenido”. De esta manera, 
                aunque cambie el id del elemento nuestro código seguirá en funcionamiento.
    1.3 | Manejadores de eventos como funciones externas   
        Es mucho mejor para nuestro código y para el reutilizamiento 
        externalizar todas nuestras sentencias JavaScript en funciones externas.  
        Es mucho mejor para nuestro código y para el reutilizamiento
        externalizar 
            todas nuestras sentencias JavaScript en funciones externas.
            De ese modo, llamamos en nuestros manejadores de eventos a
            estas funciones externas.       

                function muestra() {alert(‘Gracias’);}
                <input type=”button” value=”Pinchame” onclick=”muestra()” />

            En este caso no podemos utilizar la variable “this” con lo que
            tenemos que pasar el elemento en cuestión que queremos variar.    

                function resaltar(elemento) {switch(elemento.style.borderColor) {… }}
                <div 
                    style=”width:150px; height:60px; border:thin solid silver”
                    onmouseover=”resaltar(this)” 
                    onmouseout=”resaltar(this)”>
                    Sección de contenidos...
                </div>
    1.4 | Manejadores de eventos semánticos       
        Esta implementación del manejador se basa en 
            la externalización del código JavaScript,
            seleccionando el componente al que queremos agregar un manejador de evento 
            y desvinculando completamente nuestro código HTML del código JavaScript        
        Esta implementación del manejador se basa en 
            la externalización del código JavaScript, 
            seleccionando el componente al que queremos agregar un manejador de evento 
            y desvinculando completamente nuestro código HTML del código JavaScript.
        Es la evolución ideal debido a sus múltiples ventajas entre las que
        entran 
            la reutilización del código HTML 
            desvinculándola de todo funcionamiento mediante JavaScript, 
            pudiendo reescribir dicho funcionamiento continuamente.    

            // Función externa
                function muestra() {alert(‘Gracias’);}
            // Asignar la función externa al elemento
                document.getElementById(“boton”).onclick = muestra;
            // Elemento XHTML
                <input id=”boton” type=”button” value=”Pinchame” />

    Particularidades JSON sobre javaScript
        Algunas de las particularidades o reglas del formato JSON 
        a tener en cuenta son:
            Son duplas nombre-valor 
            y los nombres van delimitados por comillas, 
                tanto simples como dobles, aunque pueden aparecer sin ellas.
        JSON puede representar los seis tipos de valores de JavaScript: 
            objetos, 
            Arrays, 
            números, 
            cadenas, 
            booleanos 
            y null.

        Las fechas no son un tipo de objeto propio.
        Los números no pueden ir precedidos de ceros a no ser en el caso de notación decimal 
            (Ejemplo: 0.001).
        JSON es considerado un lenguaje independiente
        Sus objetos deben ser considerados como cadenas Javascript, no como objetos nativos.

    1.2 | Transformar JSON a String y String a JSON
        Muchos de los códigos JavaScript que utilizan JSON para 
        su funcionamiento o transmisión de información necesitan transformar en 
        numerosas ocasiones a String (cadenas de texto) y viceversa.

            Hay muchas maneras de hacer eso, antiguamente se utilizaba una
            función denominada “eval” que realizaba esta transformación 
            (no sin muchos fallos y desventajas)
            También se pueden realizar estas transformaciones con bibliotecas
                de terceros como pueden ser las de 
                    JQuery y 
                    Mootools (entre otras).
            Sin embargo, con la llegada del ECMAScript 5, se ha implementado
            un nuevo objeto JSON basado en la API programada por el propio
            Douglas Crockford. Sus métodos más interesantes son 
                parse() y
                stringify() 

                parse()  transforma de string a json.
                stringify() transforma de json a string.       

    El estándar DOM
        DOM (Document Object Model) 
        es un agregado de utilidades diseñadas para la manipulación de XML. 
        Además, DOM también se usa para manipulación de documentos XHTML y HTML.
        DOM es 
            una API de funciones que se pueden usar para la manipulación de las páginas XHTML 
            de forma eficiente y rápida.
        Antes de usar las funciones, 
            DOM convierte internamente el XML original en una estructura 
            fácilmente manejable formada por una jerarquía de nodos. 
            De esta manera, DOM transforma el XML en una serie de 
            nodos interconectados en árbol.   
                <!DOCTYPE html PUBLIC ”-//W3C//DTD XHTML 1.0
                Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/
                xhtml1-transitional.dtd”>

                <html xmlns=”http://www.w3.org/1999/xhtml”>
                    <head>
                        <meta http-equiv=”Content-Type” content=”text/html;
                        charset=iso-8859-1” />
                        <title>Página sencilla</title>
                    </head>
                    <body>
                        <p>Esta página es <strong>muy sencilla</strong></
                        p>
                    </body>
                </html>


        El árbol que se genera 
            no representa únicamente los contenidos del fichero origen (mediante los nodos del árbol)
            sino que representa sus relaciones (mediante las ramas del árbol que conectan los nodos).    
                            
                            Documento XHTML
                Elemento HEAD                   Elemento BODY
        Elemento META   Elemento TITLE              Elemento P
                        Texto Página sencilla       Texto Esta página es
                                                    Texto muy sencilla



    Manipulación de un HTML con DOM JavaScript
        Una de las principales ventajas del uso del DOM es que 
        permite a los desarrolladores web disponer de 
        un control preciso sobre la estructura o forma del documento HTML o XML que están controlando. 
        Las funciones que usa DOM permiten 
            añadir, eliminar, modificar y reemplazar 
                cualquier nodo de cualquier documento sencillamente.        

            Los documentos XML y HTML son convertidos por DOM 
            en una jerarquía de nodos. 
            Los nodos pueden ser de diferentes tipos.

                Document: 
                    nodo raíz de los documentos HTML y XML. 
                    Todos los demás salen de él.
                DocumentType: 
                    nodo que contiene 
                        la representación del DTD empleado en la página 
                        (indicado mediante el DOCTYPE).
                Element: 
                    contenido definido por un par de etiquetas (o tags) 
                    de apertura y cierre (<etiqueta>...</etiqueta>) 
                    o de una etiqueta abreviada que se autocierra (<etiqueta/>). 
                    Es el único nodo que puede 
                        tener tanto nodos hijos como atributos.
                Attr: 
                    el par nombre-de-atributo/valor.
                Text: 
                    el contenido del texto que se halla entre una etiqueta de apertura y una de cierre. 
                    También guarda el contenido de una sección de tipo CDATA.
                CDataSection: 
                    nodo que muestra una sección tipo     <![CDATA[ ]]>.
                Comment: 
                    un comentario de XML.
                Y otros menos usuales:
                    DocumentFragment, Entity, EntityReference, ProcessingInstruction y Notation.   
    Selectores y DOM
        Una vez DOM ha formado automáticamente el árbol completo de nodos de la página, 
        ya es posible usar sus funciones para 
            obtener la información sobre los nodos 
            o controlar su contenido.  

        JavaScript crea el objeto “Node” para tratar las propiedades y métodos necesarios
        para el procesamiento y manipulación de los documentos.
        Primeramente, el objeto Node crea las siguientes constantes para la identificación
        de los tipos de nodos:  
            • Node.ELEMENT_NODE =1
            • Node.ATTRIBUTE_NODE = 2
            • Node.TEXT_NODE = 3
            • Node.CDATA_SECTION_NODE = 4
            • Node.ENTITY_REFERENCE_NODE= 5
            • Node.ENTITY_NODE = 6
            • Node.PROCESSING_INSTRUCTION_NODE = 7
            • Node.COMMENT_NODE= 8
            • Node.DOCUMENT_NODE = 9
            • Node.DOCUMENT_TYPE_NODE= 10
            • Node.DOCUMENT_FRAGMENT_NODE = 11
            • Node.NOTATION_NODE=12    

         Y a partir de este momento, podemos usar cualquier función o propiedad de DOM 
        para nuestro código JavaScript. 

        Propiedad 
            / Método Valor devuelto Descripción

        nodeName String 
            El nombre del nodo (no está definido para algunos tipos de nodo)
        nodeValue String 
            El valor del nodo (no está definido para algunos tipos de nodo)
        nodeType Number 
            Una de las 12 constantes definidas anteriormente
        ownerDocument Document 
            Referencia al documento al que pertenece el nodo
        firstChild Node 
            Referencia del primer nodo de la lista childNodes
        lastChild Node 
            Referencia del último nodo la lista childNodes
        childNodes Nodelist 
            Lita todos los nodos hijo del nodo actual
        previousSibling Node 
            Referencia del nodo hermano anterior o null si este nodo es el primer hermano
        hasChildNodes() Bolean 
            Devuelve true si el nodo actual tiene uno o más hijos
        Attributes NameNodeMap 
            Se emplea con nodos de tipo Element.
            Contiene objetos tipo Attr que definen todos los atributos del elemento
        appendChild(nodo) Node 
            Añade un nuevo nodo al final de la lista childNodes
        removeChild(nodo) Node 
            Elimina un nodo de la lista childNodes
        replaceChild(nuevoNodo,anteriorNodo) Node 
            Reemplaza el nodo anteriorNodo por el nodo nuevoNodo
        insertBefore (nuevoNodo,anteriorNodo) Node 
            Inserta el nodo nuevoNodo antes que la
            posición del nodo anterior
            Nodo dentro de la lista childNodes 
    Caso práctico "Manejo del DOM"
        A continuación te proponemos un caso práctico, 
        lee con atención y desarrolla el caso propuesto. Así podrás practicar todo lo aprendido.        

        Parte 1
            Obtener la lista de elementos de etiqueta <p> y mostrarlos en un
            alert de JavaScript.
                <!DOCTYPE html>
                <html lang="es">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Obtener elementos <p></title>
                </head>
                <body>

                    <p>Este es el primer párrafo.</p>
                    <p>Este es el segundo párrafo.</p>
                    <p>Este es el tercer párrafo.</p>

                    <script>
                        var parrafos = document.querySelectorAll('p');
                        var contenidoParrafos = '';
                        parrafos.forEach(function(parrafo) {
                            contenidoParrafos += parrafo.textContent + '\n';
                        });

                        // Muestra el contenido en un alert
                        alert(contenidoParrafos);
                    </script>
                </body>
                </html>
            Parte 2
                Añadir un nuevo elemento <p> con el texto “Texto del nuevo párrafo”
                y que sea hijo del body.
                    <!DOCTYPE html>
                    <html lang="es">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Añadir nuevo párrafo</title>
                    </head>
                    <body>

                        <p>Este es el primer párrafo.</p>
                        <p>Este es el segundo párrafo.</p>
                        <p>Este es el tercer párrafo.</p>

                        <script>
                            // Crea un nuevo elemento <p>
                            var nuevoParrafo = document.createElement('p');

                            // Establece el texto del nuevo párrafo
                            nuevoParrafo.textContent = 'Texto del nuevo párrafo';

                            // Obtén el elemento <body>
                            var body = document.body;

                            // Añade el nuevo párrafo como hijo del elemento <body>
                            body.appendChild(nuevoParrafo);
                        </script>

                    </body>
                    </html>

    PRUEBA
        Test superado
        Has obtenido un 100 en esta tarea
        1. ¿Cuál de los siguientes no es un tipo de objeto Javascript?
        String
        Window
        X Console
        Array

        2. El evento que se produce al cargar una página en el navegador es:
        X onLoad del body
        onInit de Document
        onEnter de body.
        onOpen de Window

        3. Para crear un temporizador en Javascript utilizaremos
        El método setTemp del objeto Document
        La función timer de JavaScript.
        X El método setInterval del objeto Window
        El método setTimer del objeto Navigator

        4. ¿Qué hace la instrucción document.write()?
        Envía un documento al servidor
        X Escribe un texto html dentro de la página
        Muestra un texto en un cuadro de diálogo
        Navega a una determinada página

        5. Para obtener desde Javascript una referencia a un objeto HTML a partir de su identificador utilizamos la expresión
        document.identificador.
        X document.getElementById.
        tipo_etiqueta.identificador
        forms[0].identificador                

Módulo 5. Ajax y JQuery.
    AJAX
        Se presentó por vez primera en el artículo 
        "Ajax: A New Approach to Web Applications" 
        de Jesse James Garrett en 2005. 
        Anteriormente no existía un término que hiciera referencia a 
        un tipo nuevo de programación web que estaba surgiendo.

        Realmente, el término AJAX 
        es un acrónimo (Asynchronous JavaScript + XML).

        El artículo define AJAX de la siguiente forma:
            Ajax no es una tecnología en sí mismo. 
            En realidad, se trata de varias tecnologías independientes 
            que se unen de formas nuevas y sorprendentes.
    JQuery 
        Es una librería JavaScript que nos permite 
        acceder a los objetos del DOM de manera simple 
        creada por John Resig (Mozilla).

        Como los desarrollos web son cada vez más complejos, 
        con funcionalidades de autocompletar, drag & drop, validaciones 
        y un largo etcétera; 
        se necesitan algunas herramientas que no nos las hagan desarrollar desde cero. 
        Esto son las librerías de terceros, entre ellas JQuery, 
        que están hechas para simplificar y aclarar nuestro código JavaScript. 
        
        Adicionalmente nos suelen resolver los problemas de códigos 
        que funcionen de manera diferente en distintos navegadores.  

        Ventajas:
            Ahorra muchas líneas de código.
                Transparenta el soporte de nuestra aplicación para los principales navegadores.
                Provee un mecanismo para capturar los eventos.
            Desventajas: [ESTO ESTA MAL]
                Provee un conglomerado de funciones para hacer animaciones en la página de una manera muy simple.
                Integra funcionalidades para trabajar con AJAX.

    Ajax: tecnologías implicadas y funcionamiento
        Tecnologías implicadas
            El desarrollo de aplicaciones AJAX requiere un conocimiento avanzado 
            de todas y cada una de las tecnologías y componentes siguientes:
                XHTML y CSS, crea una presentación basada en estándares.
                XMLHttpRequest, es el objeto encargado del intercambio asíncrono de información.
                DOM, para la manipulación e interacción dinámica de la capa de presentación.
                XML, XSLT y JSON, son las tecnologías que constituyen el intercambio y la manipulación de la información.
                JavaScript, como unión de todas tecnologías.

                XHTML   CSS             XML     JSON

                    DOM                 XMLHttpRequest

                            JAVASCRIPT


        Funcionamiento
                classic web applicatiob model
            En los antiguos desarrollos web, 
            acciones que realice nuestro cliente 
            sobre la página desencadenaban 
            llamadas al servidor. 
            Y una vez el servidor hubiera acabado 
            con ese tráfico de información devolvía y, 
            por tanto, recargaba, la página web en nuestro cliente.

            Viendo el esquema, el de la izquierda muestra
            el modelo antiguo para el desarrollo web. El
            de la derecha hace entrever el proceso de
            AJAX.
            La técnica antigua que permite crear
            desarrollos web funciona correctamente,
            pero ralentiza la aplicación y el usuario
            recibe a cada interacción una petición del
            servidor que le obliga a recargar la página.

            Esto suele ser bastante molesto para el
            usuario porque a cada cosa que haga se
            recarga la página por lo que su experiencia
            con la aplicación es bastante lenta y tediosa.

            AJAX mejora la interacción del usuario con
            nuestra web, evita las recargas constantes,
            ya que el tráfico de información con el
            servidor se produce en un segundo plano.

            Veamos como es este proceso en AJAX:  

        2.3| Peticiones AJAX y manejo de respuestas  
            El objeto XMLHTTPRequest:
                • Objetivo: 
                    realizar peticiones asíncronas al servidor.
                • Es la columna vertebral de todos los
                    desarrollos con AJAX.
                • Aceptado por todos los clientes web
                    (Microsoft lo mete en IE 5 como un
                    objeto ActiveX)
            PROPIEDADES DEL OBJETO XMLHTTPREQUEST
                Propiedades Descripción
                Onereadystaetchange 
                    Determina qué función será llamada cuando 
                        la propiedad readyState del objeto cambie
                            readyState Número entero 
                            que indica el status de la petición:
                                0= No iniciada
                                1= Cargando
                                2= Cargado
                                3= Interactivo
                                4=Completado
                responseText 
                    Datos devueltos por el servidor en forma de string de texto
                responseXML 
                    Datos devueltos por el servidor expresados como un objeto documento.
                Status 
                    Código status HTTP devuelto por el servidor:
                        200= OK (petición correcta)
                        204= No content (documento sin datos)
                        301= Moved permanently (recurso movido)
                        401 = No authorized (necesita autentificación)
                        403= Forbidden (rechazada por el servidor)
                        404= Not found (no existe en servidor)
                        408= Request Timeout (tiempo sobrepasado)
                        500= Server Error (error en el servidor)
                Abort() 
                    Detiene la petición actual
                getAllResponseHeaders() 
                    Devuelve todas las cabeceras como un string
                getResponseHeaader(x) 
                    Devuelve el valor de la cabecera x como string
                Open(“Method”, “URL”,”a”) 
                    Especifica el método HTTP (por ejemplo, GET o POST9, 
                    la UR objetivo y si la petición debe ser
                    manejada asíncronamente 
                        (Si, a=”True” defecto;
                        No, a=”false”.)
                Send (content) 
                    Envía la petición
                setRequestHeader( “label”,”Value”) 
                    Configura un parámetro y valor label=value 
                    y lo asigna a la cabecera para ser enviado con la
                    petición.         
            Ejemplo
                A continuación vamos a ver un pequeño
                ejemplo práctico, con una petición GET al
                servidor para conseguir un fichero llamado
                ajax.txt. 

                <!DOCTYPE html>
                <html>
                <head>
                    <script>
                        function loadXMLDoc() {
                            var xmlhttp;

                            if (window.XMLHttpRequest) {
                                // Code for IE7+, Firefox, Chrome, Opera, Safari
                                xmlhttp = new XMLHttpRequest();
                            } else {
                                // Code for IE6, IE5
                                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                            }

                            xmlhttp.onreadystatechange = function() {
                                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                                    document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
                                }
                            };

                            xmlhttp.open("GET", "ajax.txt", true);
                            xmlhttp.send();
                        }
                    </script>
                </head>
                <body>
                    <div id="myDiv">
                        <h2>Let AJAX change this text</h2>
                    </div>
                    <button type="button" onclick="loadXMLDoc()">Change Content</button>
                </body>
                </html>

                Esta página web utiliza JavaScript y AJAX para 
                cargar dinámicamente el contenido de un archivo llamado 
                "ajax.txt" en un elemento HTML con el id "myDiv". 
                Cuando el usuario hace clic en el botón "Change Content", 
                se activa una función JavaScript que realiza una solicitud al servidor, 
                recibe el contenido del archivo 
                y actualiza el elemento "myDiv" con ese contenido, 
                todo sin recargar la página.


                VAMOS A ANALIZAR EL CÓDIGO SUPERIOR
                El botón de mi html lanza con el evento click 
                la función loadXMLDoc()
                    la cual crea una variable llamada xmlhttp.
                    El primer condicional nos sirve para saber 
                    si nuestro navegador actual 
                    puede crear el objeto XMLHttpRequest 
                    que dependiendo del navegador 
                    lo creará de una manera u otra.
                
                    Abrimos la comunicación GET 
                    para pedir el fichero ajax.txt y
                    enviamos la petición 
                    (se puede enviar tanto asíncrona como
                    síncronamente dependiendo del valor 
                    del booleano).

                    La función onreadystatechange() 
                    se ejecutará a cada cambio de estado 
                    y cuando la petición sea de 200 
                    y el readystate de 4
                        significará que se ha completado con éxito 
                        (con cualquier otra solución debemos 
                        tratar el error o los errores 
                        que hemos visto en
                        las tablas anteriores).

                    Finalmente seleccionamos el div en cuestión 
                    (a partir del API del DOM) 
                    y cambiamos su texto plano 
                    por el que me ha venido en mi
                    fichero ajax.txt
        2.4 | XML vs JSON
            Si comparamos los dos formatos, 
            queda claro que uno no es mejor
            que otro. 
            Como siempre, de lo que se trata, 
            es saber 
                cómo queremos tratar nuestra información 
                y con qué queremos conectarnos para ese trato.
            Si estamos hablando de 
                envío de datos de un extremo a otro 
                (como en el caso de dos servicios web o para dos servidores independientes)
                XML parece una elección correcta. 
                    Aunque, también hay que decir
                    que en el caso de los servicios web 
                    han aumentado el uso de REST frente a SOAP, 
                    servicios que van enfocados al uso de JSON
            Si son datos que debemos transmitir en una misma aplicación
            internamente o, aparte, estamos haciendo uso de AJAX, 
            JSON debería ser nuestra elección sin ningún tipo de dudas 
            ya que la devolución del objeto de AJAX es fácilmente convertible.        

        Casos prácticos "Ajax"
            A continuación te proponemos unos casos prácticos, 
            leelos con atención y desarrolla la actividad presentada. 
            Así podrás practicar todo lo aprendido.

            JSON
            Doc: JS_Caso 2_JSON.pdf
            JS_Caso 2_JSON (1).pdf
                DESARROLLO
                    Construya un objeto JSON con datos que
                    sean válidos para este

                    PhoneBook
                    + objectid : String
                    + owner : Contact
                    + contacts : Contact[]

                    {
                    "objectid": "valor_del_objectid",
                    "owner": "valor_del_owner",
                    "contacts": []
                    }

                    Contact
                    + objectid : String
                    + phone : String
                    + name : String
                    + title : String
                    + age : int
                    + address : Address

                    {
                    "objectid": "valor_del_objectid",
                    "phone": "valor_del_phone",
                    "name": "valor_del_name",
                    "title": "valor_del_title",
                    "age": 25,  // valor del age, asegúrate de usar un número entero
                    "address": {
                        "street": "valor_de_la_calle",
                        "city": "valor_de_la_ciudad",
                        "country": "valor_del_pais"
                    }
                    }

                    Address
                    + objectid : String
                    + street : String
                    + city : String
                    + state : String

                    {
                    "objectid": "valor_del_objectid",
                    "street": "valor_de_la_calle",
                    "city": "valor_de_la_ciudad",
                    "state": "valor_del_estado"
                    }

            Realización de petición AJAX a un XML
            Doc: JS_Caso 3_AJAXXML.pdf
                DESARROLLO
                    Teniendo el archivo XML cuyo nombre es ejemploXML.xml 
                    y con este contenido:
                         "Hola holita"
                    Realizar un formulario con 
                        un texto 
                        y un botón de submit que cuando
                        se envíe una petición por Ajax al servidor 
                        obtenga el contenido de
                            este XML y lo ponga en el campo de texto.
                    <!DOCTYPE html>
                        <html lang="es">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>Formulario Ajax</title>
                            <script>
                                function obtenerContenidoXML() {
                                    var xmlhttp;
                                    if (window.XMLHttpRequest) {
                                        xmlhttp = new XMLHttpRequest();
                                    } else {
                                        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                                    }
                                    xmlhttp.onreadystatechange = function() {
                                        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                                            document.getElementById("campoTexto").value = xmlhttp.responseText;
                                        }
                                    };
                                    xmlhttp.open("GET", "ejemploXML.xml", true);
                                    xmlhttp.send();
                                }
                            </script>
                        </head>
                        <body>
                            <h2>Formulario Ajax</h2>
                            <form onsubmit="obtenerContenidoXML(); return false;">
                                <label for="campoTexto">Contenido XML:</label>
                                <input type="text" id="campoTexto" name="campoTexto" readonly>
                                <br>
                                <input type="submit" value="Obtener Contenido XML">
                            </form>
                        </body>
                        </html>            

            Realización de petición AJAX a un JSON
            Doc: JS_Caso 4_AJAXJSON.pdf
                DESARROLLO 
                    Teniendo el archivo JSON cuyo nombre es ejemploJSON.json y con
                    este contenido: {“name”: “fer”, “country”: “Spain”}
                    Realizar un formulario con un texto y un botón de submit que cuando
                    se envíe una petición por Ajax al servidor obtenga el contenido de
                    este JSON y lo ponga en el campo de texto.
                <!DOCTYPE html>
                    <html lang="es">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Formulario con Ajax</title>
                    </head>
                    <body>
                        <h1>Formulario con Ajax</h1>
                        <form id="miFormulario">
                            <label for="contenidoJSON">Contenido JSON:</label>
                            <textarea id="contenidoJSON" rows="10" cols="50" readonly></textarea>
                            <br>
                            <button type="button" onclick="obtenerContenidoJSON()">Obtener JSON</button>
                        </form>
                        <script>
                            function obtenerContenidoJSON() {
                                var xhr = new XMLHttpRequest();
                                xhr.open("GET", "ejemploJSON.json", true);
                                xhr.onreadystatechange = function() {
                                    if (xhr.readyState == 4 && xhr.status == 200) {
                                        var contenidoJSON = JSON.parse(xhr.responseText);
                                        document.getElementById("contenidoJSON").value = JSON.stringify(contenidoJSON, null, 2);
                                    }
                                };
                                xhr.send();
                            }
                        </script>
                    </body>
                    </html>

            Transformaciones con JSON
            Doc: JS_Caso 5_TransformacionesJSON.pdf 
                Douglas Crawford nos dio la posibilidad de transformar un fichero
                JSON a String y viceversa.
                Transformaciones con JSON
                Caso práctico
                Use las funciones que este genio implementó con un objeto JSON
                que contenga al menos otro objeto y un array de objetos como
                propiedades. Muestre por consola el resultado de transformarlo a
                String y vuelva a transformar ese String a objeto comprobando que
                mantiene todas sus propiedades.   